package main

import (
  "fmt"
  "os"
  "strings"

  "github.com/jessevdk/go-flags"

  "{{.ModuleURL}}/config"
  "{{.ModuleURL}}/logs"
  "{{.ModuleURL}}"
)

// Version, Commit, and BuildTime are set at build time via -ldflags.
var (
  Version   string
  Commit    string
  BuildTime string
)

// Options are top-level CLI flags.
type Options struct {
  Verbose bool `short:"v" long:"verbose" description:"Enable verbose logging"`
}

func main() {
  var opts Options
  parser := flags.NewParser(&opts, flags.Default)

  parser.AddCommand(
    "version",
    "Show version info",
    "Prints version, commit, and build time",
    &VersionCommand{},
  )

  parser.AddCommand(
    "config",
    "Manage configuration",
    "Get or set configuration values",
    &ConfigCommand{},
  )

  parser.AddCommand(
    "about",
    "Show about info",
    "Prints information about the project",
    &AboutCommand{},
  )

  _, err := parser.Parse()
  if err != nil {
    os.Exit(1)
  }

  logs.Options.Verbose = opts.Verbose
  logs.Options.AppName = "{{.ProjectName}}"
  logs.Options.Version = Version
  logs.InitLogger(os.Getenv("ENV"))

  logs.Infof("Starting {{.ProjectName}} (version=%s, commit=%s, built=%s)",
    Version, Commit, BuildTime)
}

// VersionCommand prints out version info
type VersionCommand struct{}

func (cmd *VersionCommand) Execute(args []string) error {
  fmt.Printf("{{.ProjectName}}\n  Version:   %s\n  Commit:    %s\n  BuildTime: %s\n",
    Version, Commit, BuildTime)
  return nil
}

// ConfigCommand handles the 'config' subcommand
type ConfigCommand struct {
  Get      GetConfigCmd      `command:"get" description:"Get a config value"`
  Set      SetConfigCmd      `command:"set" description:"Set a config value"`
  Describe DescribeConfigCmd `command:"describe" description:"Show config info"`
}

func (cmd *ConfigCommand) Execute(args []string) error {
  return fmt.Errorf("Please specify one command of: %s", strings.Join([]string{"describe", "get", "set"}, ", "))
}

// GetConfigCmd handles 'config get <key>'
type GetConfigCmd struct {
  Args struct {
    Key string `positional-arg-name:"key" description:"Config key to get"`
  } `positional-args:"yes" required:"yes"`
}

func (cmd *GetConfigCmd) Execute(args []string) error {
  value, err := config.Get(cmd.Args.Key)
  if err != nil {
    return err
  }
  fmt.Printf("%s = %s\n", cmd.Args.Key, value)
  return nil
}

// SetConfigCmd handles 'config set <key> <value>'
type SetConfigCmd struct {
  Args struct {
    Key   string `positional-arg-name:"key" description:"Config key to set"`
    Value string `positional-arg-name:"value" description:"Value to set"`
  } `positional-args:"yes" required:"yes"`
}

func (cmd *SetConfigCmd) Execute(args []string) error {
  err := config.Set(cmd.Args.Key, cmd.Args.Value)
  if err != nil {
    return err
  }
  fmt.Printf("%s = %s\n", cmd.Args.Key, cmd.Args.Value)
  return nil
}

// DescribeConfigCmd handles 'config describe'
type DescribeConfigCmd struct{}

func (cmd *DescribeConfigCmd) Execute(args []string) error {
  fmt.Printf("{{.ProjectName}} config file: %s\n", config.Path())
  lines, err := config.Describe()
  if err != nil {
    return err
  }
  for _, line := range lines {
    fmt.Println(line)
  }
  return nil
}

// AboutCommand prints out about info
type AboutCommand struct{}

func (cmd *AboutCommand) Execute(args []string) error {
  fmt.Println({{.ProjectName}}.About())
  return nil
}